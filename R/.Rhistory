cost.design=c(100,101,102,103)
cost.design<=102
Time=3
k=3
Time.complete=1
n.miss.point=1:(Time*k-Time.complete*k-1)
ms.range=c((Time.complete*k+1):(Time*k))
# storage bins
designs=list()
probs=list()
pat.n=list()
#num.miss.wave=c()
cost.design=c() # cost of each design
rs=1
for (i in n.miss.point){               # loop over different # of missing waves (designs)
mpoint=combn(ms.range,i)           # possible combinations of missing points when n.miss.point=i
pattern=matrix(0,nrow=ncol(mpoint),ncol=k*Time)  #pattern matrix
for (j in 1:nrow(pattern)){
for (m in 1:nrow(mpoint))
pattern[j,mpoint[m,j]]=1   #put missing in pattern matrix
}
completers=rep(0,ncol(pattern))       # completers pattern
dropper=c(rep(0,Time.complete*k),rep(1,(Time-Time.complete)*k))   #droppers pattern
# when user needs to have complete data on certain variables
if(is.null(complete.var)==F){
if (length(complete.var)==1){
# find which column these variables are
complete.cols=which(VNAMES%in%complete.var)
# whether to keep the rows
keep=pattern[,complete.cols]==0
pattern=pattern[keep,]
}
if (length(complete.var)>1){
complete.cols=which(VNAMES%in%complete.var)
keep=rowSums(pattern[,complete.cols]==0)==length(complete.var)
temp.pattern=pattern[keep,]
if (is.null(dim(temp.pattern))==F){
pattern=temp.pattern
}
if (is.null(dim(temp.pattern))==T){
pattern=t(as.matrix(temp.pattern))
}
}
}
if(pd!=0){      # if there are droppers
patmx=rbind(pattern,completers,dropper)   # missing patterns for Mplus later
}
if(pd==0){      # if there are no droppers
patmx=rbind(pattern,completers)
}
designs[[rs]]=patmx
#### pattern probs
# p.probs
if (pd==0){
p.probs=c(rep(round((1-pc-pd)/(nrow(patmx)-1),6), nrow(patmx)-1),pc)
}
if (pd!=0){
p.probs=c(rep(round((1-pc-pd)/(nrow(patmx)-2),6), nrow(patmx)-2),pc,pd)
}
probs[[rs]]=p.probs
# ns in each pattern
pn=rep(0,length(p.probs))
for (pp in 1:(length(pn)-1)){
pn[pp]=floor(n*p.probs[pp])
}
pn[length(pn)]=n-sum(pn[1:(length(pn)-1)])
pat.n[[rs]]=pn
### cost of each design
cost.design[rs]=sum((1-patmx[,ms.range])%*%costmx*pn)
rs=rs+1
}
complete.var=NULL
rs=1
for (i in n.miss.point){               # loop over different # of missing waves (designs)
mpoint=combn(ms.range,i)           # possible combinations of missing points when n.miss.point=i
pattern=matrix(0,nrow=ncol(mpoint),ncol=k*Time)  #pattern matrix
for (j in 1:nrow(pattern)){
for (m in 1:nrow(mpoint))
pattern[j,mpoint[m,j]]=1   #put missing in pattern matrix
}
completers=rep(0,ncol(pattern))       # completers pattern
dropper=c(rep(0,Time.complete*k),rep(1,(Time-Time.complete)*k))   #droppers pattern
# when user needs to have complete data on certain variables
if(is.null(complete.var)==F){
if (length(complete.var)==1){
# find which column these variables are
complete.cols=which(VNAMES%in%complete.var)
# whether to keep the rows
keep=pattern[,complete.cols]==0
pattern=pattern[keep,]
}
if (length(complete.var)>1){
complete.cols=which(VNAMES%in%complete.var)
keep=rowSums(pattern[,complete.cols]==0)==length(complete.var)
temp.pattern=pattern[keep,]
if (is.null(dim(temp.pattern))==F){
pattern=temp.pattern
}
if (is.null(dim(temp.pattern))==T){
pattern=t(as.matrix(temp.pattern))
}
}
}
if(pd!=0){      # if there are droppers
patmx=rbind(pattern,completers,dropper)   # missing patterns for Mplus later
}
if(pd==0){      # if there are no droppers
patmx=rbind(pattern,completers)
}
designs[[rs]]=patmx
#### pattern probs
# p.probs
if (pd==0){
p.probs=c(rep(round((1-pc-pd)/(nrow(patmx)-1),6), nrow(patmx)-1),pc)
}
if (pd!=0){
p.probs=c(rep(round((1-pc-pd)/(nrow(patmx)-2),6), nrow(patmx)-2),pc,pd)
}
probs[[rs]]=p.probs
# ns in each pattern
pn=rep(0,length(p.probs))
for (pp in 1:(length(pn)-1)){
pn[pp]=floor(n*p.probs[pp])
}
pn[length(pn)]=n-sum(pn[1:(length(pn)-1)])
pat.n[[rs]]=pn
### cost of each design
cost.design[rs]=sum((1-patmx[,ms.range])%*%costmx*pn)
rs=rs+1
}
pd=0
pc=0.1
rs=1
for (i in n.miss.point){               # loop over different # of missing waves (designs)
mpoint=combn(ms.range,i)           # possible combinations of missing points when n.miss.point=i
pattern=matrix(0,nrow=ncol(mpoint),ncol=k*Time)  #pattern matrix
for (j in 1:nrow(pattern)){
for (m in 1:nrow(mpoint))
pattern[j,mpoint[m,j]]=1   #put missing in pattern matrix
}
completers=rep(0,ncol(pattern))       # completers pattern
dropper=c(rep(0,Time.complete*k),rep(1,(Time-Time.complete)*k))   #droppers pattern
# when user needs to have complete data on certain variables
if(is.null(complete.var)==F){
if (length(complete.var)==1){
# find which column these variables are
complete.cols=which(VNAMES%in%complete.var)
# whether to keep the rows
keep=pattern[,complete.cols]==0
pattern=pattern[keep,]
}
if (length(complete.var)>1){
complete.cols=which(VNAMES%in%complete.var)
keep=rowSums(pattern[,complete.cols]==0)==length(complete.var)
temp.pattern=pattern[keep,]
if (is.null(dim(temp.pattern))==F){
pattern=temp.pattern
}
if (is.null(dim(temp.pattern))==T){
pattern=t(as.matrix(temp.pattern))
}
}
}
if(pd!=0){      # if there are droppers
patmx=rbind(pattern,completers,dropper)   # missing patterns for Mplus later
}
if(pd==0){      # if there are no droppers
patmx=rbind(pattern,completers)
}
designs[[rs]]=patmx
#### pattern probs
# p.probs
if (pd==0){
p.probs=c(rep(round((1-pc-pd)/(nrow(patmx)-1),6), nrow(patmx)-1),pc)
}
if (pd!=0){
p.probs=c(rep(round((1-pc-pd)/(nrow(patmx)-2),6), nrow(patmx)-2),pc,pd)
}
probs[[rs]]=p.probs
# ns in each pattern
pn=rep(0,length(p.probs))
for (pp in 1:(length(pn)-1)){
pn[pp]=floor(n*p.probs[pp])
}
pn[length(pn)]=n-sum(pn[1:(length(pn)-1)])
pat.n[[rs]]=pn
### cost of each design
cost.design[rs]=sum((1-patmx[,ms.range])%*%costmx*pn)
rs=rs+1
}
n=1000
rs=1
for (i in n.miss.point){               # loop over different # of missing waves (designs)
mpoint=combn(ms.range,i)           # possible combinations of missing points when n.miss.point=i
pattern=matrix(0,nrow=ncol(mpoint),ncol=k*Time)  #pattern matrix
for (j in 1:nrow(pattern)){
for (m in 1:nrow(mpoint))
pattern[j,mpoint[m,j]]=1   #put missing in pattern matrix
}
completers=rep(0,ncol(pattern))       # completers pattern
dropper=c(rep(0,Time.complete*k),rep(1,(Time-Time.complete)*k))   #droppers pattern
# when user needs to have complete data on certain variables
if(is.null(complete.var)==F){
if (length(complete.var)==1){
# find which column these variables are
complete.cols=which(VNAMES%in%complete.var)
# whether to keep the rows
keep=pattern[,complete.cols]==0
pattern=pattern[keep,]
}
if (length(complete.var)>1){
complete.cols=which(VNAMES%in%complete.var)
keep=rowSums(pattern[,complete.cols]==0)==length(complete.var)
temp.pattern=pattern[keep,]
if (is.null(dim(temp.pattern))==F){
pattern=temp.pattern
}
if (is.null(dim(temp.pattern))==T){
pattern=t(as.matrix(temp.pattern))
}
}
}
if(pd!=0){      # if there are droppers
patmx=rbind(pattern,completers,dropper)   # missing patterns for Mplus later
}
if(pd==0){      # if there are no droppers
patmx=rbind(pattern,completers)
}
designs[[rs]]=patmx
#### pattern probs
# p.probs
if (pd==0){
p.probs=c(rep(round((1-pc-pd)/(nrow(patmx)-1),6), nrow(patmx)-1),pc)
}
if (pd!=0){
p.probs=c(rep(round((1-pc-pd)/(nrow(patmx)-2),6), nrow(patmx)-2),pc,pd)
}
probs[[rs]]=p.probs
# ns in each pattern
pn=rep(0,length(p.probs))
for (pp in 1:(length(pn)-1)){
pn[pp]=floor(n*p.probs[pp])
}
pn[length(pn)]=n-sum(pn[1:(length(pn)-1)])
pat.n[[rs]]=pn
### cost of each design
cost.design[rs]=sum((1-patmx[,ms.range])%*%costmx*pn)
rs=rs+1
}
costmx=c(5,5,5,10,10,10)
rs=1
for (i in n.miss.point){               # loop over different # of missing waves (designs)
mpoint=combn(ms.range,i)           # possible combinations of missing points when n.miss.point=i
pattern=matrix(0,nrow=ncol(mpoint),ncol=k*Time)  #pattern matrix
for (j in 1:nrow(pattern)){
for (m in 1:nrow(mpoint))
pattern[j,mpoint[m,j]]=1   #put missing in pattern matrix
}
completers=rep(0,ncol(pattern))       # completers pattern
dropper=c(rep(0,Time.complete*k),rep(1,(Time-Time.complete)*k))   #droppers pattern
# when user needs to have complete data on certain variables
if(is.null(complete.var)==F){
if (length(complete.var)==1){
# find which column these variables are
complete.cols=which(VNAMES%in%complete.var)
# whether to keep the rows
keep=pattern[,complete.cols]==0
pattern=pattern[keep,]
}
if (length(complete.var)>1){
complete.cols=which(VNAMES%in%complete.var)
keep=rowSums(pattern[,complete.cols]==0)==length(complete.var)
temp.pattern=pattern[keep,]
if (is.null(dim(temp.pattern))==F){
pattern=temp.pattern
}
if (is.null(dim(temp.pattern))==T){
pattern=t(as.matrix(temp.pattern))
}
}
}
if(pd!=0){      # if there are droppers
patmx=rbind(pattern,completers,dropper)   # missing patterns for Mplus later
}
if(pd==0){      # if there are no droppers
patmx=rbind(pattern,completers)
}
designs[[rs]]=patmx
#### pattern probs
# p.probs
if (pd==0){
p.probs=c(rep(round((1-pc-pd)/(nrow(patmx)-1),6), nrow(patmx)-1),pc)
}
if (pd!=0){
p.probs=c(rep(round((1-pc-pd)/(nrow(patmx)-2),6), nrow(patmx)-2),pc,pd)
}
probs[[rs]]=p.probs
# ns in each pattern
pn=rep(0,length(p.probs))
for (pp in 1:(length(pn)-1)){
pn[pp]=floor(n*p.probs[pp])
}
pn[length(pn)]=n-sum(pn[1:(length(pn)-1)])
pat.n[[rs]]=pn
### cost of each design
cost.design[rs]=sum((1-patmx[,ms.range])%*%costmx*pn)
rs=rs+1
}
rm.budget=45*1000*0.7
if (sum(cost.design>rm.budget)==length(cost.design)){
stop ("all wave missing designs cost more than the avaiable remaing budget. Try other designs.")
}
designs2=designs[cost.design<=rm.budget] #select the designs that are below the budget limit
probs2=probs[cost.design<=rm.budget]
miss.point=n.miss.point[cost.design<=rm.budget]
cost.design2=cost.design[cost.design<=rm.budget]
pat.n2=pat.n[cost.design<=rm.budget]
designs2
cost.design
cost.design<=rm.budget
rm.budget
a=c(31500,31501,31502)
a<=31500
cost.design<=31500
cost.design<=rm.budget
a=rm.budget
cost.design<=a
cost.design<a
cost.design<=31500
rm.budget=31500L
cost.design<=rm.budget
rm.budget=eval(45*1000*0.7)
cost.design<=rm.budget
rm.budget=eval(45*1000*0.7)L
