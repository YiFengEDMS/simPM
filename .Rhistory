library(pkgdown)
build_home()
getwd()
devtools::install_github('yihui/knitr')
library(knitr)
remove.packages("knitr")
library(rmarkdown)
library(pkgdown)
library(knitr)
library(pkgdown)
library(rmarkkgdown)
library(rmarkdown)
# Download pandoc 2.7.1 built with ghc-8.6.4, and instruct
# RStudio + rmarkdown to use it.
local({
# The directory where Pandoc will be extracted. Feel free
# to adjust this path as appropriate.
dir <- "~/rstudio-pandoc"
# The version of Pandoc to be installed.
version <- "2.7.1"
# Create and move to the requested directory.
dir.create(dir, showWarnings = FALSE, recursive = TRUE)
owd <- setwd(dir)
on.exit(setwd(owd), add = TRUE)
# Construct path to pandoc.
root <- "https://s3.amazonaws.com/rstudio-buildtools"
suffix <- sprintf("pandoc-%s-windows-x86_64.zip", version)
url <- file.path(root, "pandoc-rstudio", version, suffix)
# Download and extract pandoc.
file <- basename(url)
utils::download.file(url, destfile = file)
utils::unzip(file)
unlink(file)
# Write .Renviron to update the version of Pandoc used.
entry <- paste("RSTUDIO_PANDOC", shQuote(path.expand(dir)), sep = " = ")
contents <- if (file.exists("~/.Renviron")) readLines("~/.Renviron")
filtered <- grep("^RSTUDIO_PANDOC", contents, value = TRUE, invert = TRUE)
amended <- union(filtered, entry)
writeLines(amended, "~/.Renviron")
# Report change to the user.
writeLines("Updated .Renviron:\n")
writeLines(amended)
writeLines("\nPlease restart RStudio for these changes to take effect.")
})
30*323*0.7
setwd("G:/My Drive/B. Research/A. Planned missing data designs/AERA 2019/illustrative examples")
library(simPM)
load(wave.ex1.rda)
load("wave.ex1.rda")
setwd("C:/Users/yifeng94/Desktop/simPM/simPM-git")
#' A summary function to extract the important information of the output object.
#' @return An object containing the information of the optimal PM design, with highest power for testing the
#' focal parameters, compared with other PM designs
#'
#' @import MplusAutomation
#' @import simsem
#' @import lavaan
#' @export summary.opt
#' @examples
summary.opt=function(object){
focal.param=object$misc$focal.param
opt.powers=summaryParam(object$opt.output)[focal.param,]
print("=================results summary================")
print(object$results)
print("=================Optimal design=================")
print(object$opt.design)
print("=================Optimal design powers=================")
print(opt.powers)
print("=================Optimal patterns===============")
print(object$opt.pattern)
print("=================Optimal probs==================")
print(object$opt.probs)
print("=================Optimal ns====================")
print(object$opt.ns)
}
#summary.opt(re.ob)
summary.opt(wave.ex1)
remove.packages("simPM")
devtools::install_github(YiFengEDMS/simPM)
devtools::install_github("YiFengEDMS/simPM")
wave.ex1=simPM(
popModel=popModel,                                 #supply the population model using lavaan language
analyzeModel=analyzeModel,                         #supply the analysis model using lavaan language
VarNAMES=c("se1","se2","se3","se4"),               #the observed variable names, in chronological order
Time=4,                                            #total number of waves
Time.complete=1,                                   #number of waves completed before funding cut occurs
k=1,                                               #number of observed variables collected at each wave
pc=0.2,                                            #percentage of participants to provide complete data after funding cut
pd=0,                                              #percentage of participants to provide no data after funding cut
costmx=c(5,10,15),                                 #unit cost of each data point at the following waves
n=323,                                             #original sample size
nreps=1000,                                        #number of replications for simulation
focal.param=c("i~1","s~1","i~~i","s~~s"),          #specify the focal parameters
complete.wave=NULL,                                #specify any future wave/variables that need complete data
eval.budget=T,                                     #whether or not there is a budget restriction
rm.budget=30*323*0.7,                              #the amount of remaining budget
distal.var=NULL,                                   #specify any distal variables that are not subject to PM
seed=12345,                                        #random seed
engine="l",                                        #use lavaan to fit the models
methods="wave")                                    #type of PHPM designs, "wave" indicates wave-level missing
popModel <- '
i=~1*se1+1*se2+1*se3+1*se4
s=~0*se1+1*se2+2*se3+3*se4
se1~0*1
se2~0*1
se3~0*1
se4~0*1
se1~~0.071*se1
se2~~0.034*se2
se3~~0.067*se3
se4~~0.025*se4
i~2.983*1
s~0.086*1
i~~0.268*i+(-0.039)*s
s~~0.023*s
'
analyzeModel <- '
i=~1*se1+1*se2+1*se3+1*se4
s=~0*se1+1*se2+2*se3+3*se4
se1~0*1
se2~0*1
se3~0*1
se4~0*1
se1~~se1
se2~~se2
se3~~se3
se4~~se4
i~1
s~1
i~~i+s
s~~s
'
wave.ex1=simPM(
popModel=popModel,                                 #supply the population model using lavaan language
analyzeModel=analyzeModel,                         #supply the analysis model using lavaan language
VarNAMES=c("se1","se2","se3","se4"),               #the observed variable names, in chronological order
Time=4,                                            #total number of waves
Time.complete=1,                                   #number of waves completed before funding cut occurs
k=1,                                               #number of observed variables collected at each wave
pc=0.2,                                            #percentage of participants to provide complete data after funding cut
pd=0,                                              #percentage of participants to provide no data after funding cut
costmx=c(5,10,15),                                 #unit cost of each data point at the following waves
n=323,                                             #original sample size
nreps=1000,                                        #number of replications for simulation
focal.param=c("i~1","s~1","i~~i","s~~s"),          #specify the focal parameters
complete.wave=NULL,                                #specify any future wave/variables that need complete data
eval.budget=T,                                     #whether or not there is a budget restriction
rm.budget=30*323*0.7,                              #the amount of remaining budget
distal.var=NULL,                                   #specify any distal variables that are not subject to PM
seed=12345,                                        #random seed
engine="l",                                        #use lavaan to fit the models
methods="wave")                                    #type of PHPM designs, "wave" indicates wave-level missing
getwd()
setwd("C:/Users/yifeng94/Desktop/simPM/simPM-git/examples")
save(wave.ex1,file="linear LGM example.rda")
plotPM(wave.ex1)
remove.packages("simPM")
devtools:install_github("YiFengEDMS/simPM")
library(devtools)
devtools:install_github("YiFengEDMS/simPM")
devtools::install_github("YiFengEDMS/simPM")
simPM()
library(simPM)
simPM()
?simPM
simPM()
simPM::simPM()
wave.ex1=simPM(
popModel=popModel,                                 #supply the population model using lavaan language
analyzeModel=analyzeModel,                         #supply the analysis model using lavaan language
VarNAMES=c("se1","se2","se3","se4"),               #the observed variable names, in chronological order
Time=4,                                            #total number of waves
Time.complete=1,                                   #number of waves completed before funding cut occurs
k=1,                                               #number of observed variables collected at each wave
pc=0.2,                                            #percentage of participants to provide complete data after funding cut
pd=0,                                              #percentage of participants to provide no data after funding cut
costmx=c(5,10,15),                                 #unit cost of each data point at the following waves
n=323,                                             #original sample size
nreps=10,                                        #number of replications for simulation
focal.param=c("i~1","s~1","i~~i","s~~s"),          #specify the focal parameters
complete.wave=NULL,                                #specify any future wave/variables that need complete data
eval.budget=T,                                     #whether or not there is a budget restriction
rm.budget=30*323*0.7,                              #the amount of remaining budget
distal.var=NULL,                                   #specify any distal variables that are not subject to PM
seed=12345,                                        #random seed
engine="l",                                        #use lavaan to fit the models
methods="wave")                                    #type of PHPM designs, "wave" indicates wave-level missing
#setwd("C:/Users/yifeng94/Desktop/simPM/simPM-git/examples")
#save(wave.ex1,file="linear LGM example.rda")
popModel <- '
i=~1*se1+1*se2+1*se3+1*se4
s=~0*se1+1*se2+2*se3+3*se4
se1~0*1
se2~0*1
se3~0*1
se4~0*1
se1~~0.071*se1
se2~~0.034*se2
se3~~0.067*se3
se4~~0.025*se4
i~2.983*1
s~0.086*1
i~~0.268*i+(-0.039)*s
s~~0.023*s
'
analyzeModel <- '
i=~1*se1+1*se2+1*se3+1*se4
s=~0*se1+1*se2+2*se3+3*se4
se1~0*1
se2~0*1
se3~0*1
se4~0*1
se1~~se1
se2~~se2
se3~~se3
se4~~se4
i~1
s~1
i~~i+s
s~~s
'
wave.ex1=simPM(
popModel=popModel,                                 #supply the population model using lavaan language
analyzeModel=analyzeModel,                         #supply the analysis model using lavaan language
VarNAMES=c("se1","se2","se3","se4"),               #the observed variable names, in chronological order
Time=4,                                            #total number of waves
Time.complete=1,                                   #number of waves completed before funding cut occurs
k=1,                                               #number of observed variables collected at each wave
pc=0.2,                                            #percentage of participants to provide complete data after funding cut
pd=0,                                              #percentage of participants to provide no data after funding cut
costmx=c(5,10,15),                                 #unit cost of each data point at the following waves
n=323,                                             #original sample size
nreps=10,                                        #number of replications for simulation
focal.param=c("i~1","s~1","i~~i","s~~s"),          #specify the focal parameters
complete.wave=NULL,                                #specify any future wave/variables that need complete data
eval.budget=T,                                     #whether or not there is a budget restriction
rm.budget=30*323*0.7,                              #the amount of remaining budget
distal.var=NULL,                                   #specify any distal variables that are not subject to PM
seed=12345,                                        #random seed
engine="l",                                        #use lavaan to fit the models
methods="wave")                                    #type of PHPM designs, "wave" indicates wave-level missing
#setwd("C:/Users/yifeng94/Desktop/simPM/simPM-git/examples")
#save(wave.ex1,file="linear LGM example.rda")
summary.opt(wave.ex1)
remove.packages("simPM")
library(pkgdown)
build_site()
setwd("C:/Users/yifeng94/Desktop/simPM/simPM-git")
build_site()
getwd()
require(devtools)
library(pkgdown)
