if (eval.budget==F) {
designs2 <- designs
probs2 <- probs
miss.point <- n.miss.point
cost.design2 <- cost.design
pat.n2 <- pat.n
}
convergence.rate <- c()   #convergence rate
weakest.param.name <- c()
weakest.para.power <- c()
template <- list()
logical.Matrix <- list()
sim.out <- list()
for (d in seq_len(length(designs2))) {
patmx <- designs2[[d]]
p.probs <- probs2[[d]]
pn <- pat.n2[[d]]
VNAMES <- NAMES
if (prod(pn>=1)==0) {
convergence.rate[d] <- NA   #convergence rate
weakest.param.name[d] <- NA
weakest.para.power[d] <- -99
template[d] <- NA
logical.Matrix[d] <- NA
sim.out[d] <- NA
}
if (prod(pn >= 1) != 0) {
###distal variables
if (is.null(distal.var)==F) {
dis.pat <- matrix(0,nrow=nrow(patmx),ncol=length(distal.var))
patmx <- cbind(patmx,dis.pat)
VNAMES <- c(VNAMES,distal.var)
}
#  FNAME=paste0("missing-waves-",miss.waves[d])  #file name
logical.mx <- matrix(0,nrow=n, ncol=ncol(patmx))
#  data <- data[sample(1:nrow(data)),]   #shuffle the rows
logical.mx[1:pn[1], ] <- patmx[rep(1,pn[1]), ]
if (length(pn) >= 3) {
for (pi in 2:(length(pn)-1)) {
logical.mx[(sum(pn[1:(pi-1)])+1):sum(pn[1:pi]), ] <- patmx[rep(pi, pn[pi]), ]
}
}
complete.var = NULL
}
}
complete.var = NULL
rm.budget = 10000000
n.miss.point <- 1:(Time*k - Time.complete * k - 1)
ms.range <- c((Time.complete * k + 1):(Time * k))
# storage bins
designs <- list()
probs <- list()
pat.n <- list()
#num.miss.wave=c()
cost.design <- c()                   # cost of each design
rs <- 1
n.miss.point
i = 1
mpoint <- combn(ms.range, i)           # possible combinations of missing points when n.miss.point=i
pattern <- matrix(0, nrow = ncol(mpoint), ncol = k * Time)  #pattern matrix
for (j in seq_len(nrow(pattern))) {
for (m in seq_len(nrow(mpoint)))
pattern[j, mpoint[m, j]]=1   #put missing in pattern matrix
}
completers <- rep(0, ncol(pattern))       # completers pattern
dropper <- c(rep(0, Time.complete * k),rep(1, (Time - Time.complete) * k))   #droppers pattern
# when user needs to have complete data on certain variables
if (is.null(complete.var)==F) {
if (length(complete.var)==1) {
# find which column these variables are
complete.cols <- which(VNAMES %in% complete.var)
# whether to keep the rows
keep <- pattern[, complete.cols]==0
pattern <- pattern[keep, , drop=FALSE]
}
if (length(complete.var) > 1) {
complete.cols <- which(VNAMES %in% complete.var)
keep <- rowSums(pattern[ , complete.cols]==0)==length(complete.var)
temp.pattern <- pattern[keep, , drop=FALSE]
if (is.null(dim(temp.pattern))==F) {
pattern <- temp.pattern
}
if (is.null(dim(temp.pattern))==T) {
pattern <- t(as.matrix(temp.pattern))
}
}
}
if(pd!=0) {      # if there are droppers
patmx <- rbind(pattern, completers, dropper)   # missing patterns for Mplus later
}
if(pd==0) {      # if there are no droppers
patmx <- rbind(pattern,completers)
}
designs[[rs]]=patmx
#### pattern probs
# p.probs
if (pd==0) {
p.probs <- c(rep(round((1 - pc - pd) / (nrow(patmx) - 1), 6), nrow(patmx) - 1), pc)
}
if (pd!=0) {
p.probs <- c(rep(round((1 - pc - pd) / (nrow(patmx) - 2), 6), nrow(patmx) - 2), pc, pd)
}
probs[[rs]] <- p.probs
# ns in each pattern
pn <- rep(0,length(p.probs))
for (pp in 1:(length(pn)-1)){
pn[pp] <- floor(n * p.probs[pp])
}
pn[length(pn)] <- n-sum(pn[1:(length(pn)-1)])
pat.n[[rs]] <- pn
### cost of each design
cost.design[rs] <- sum((1-patmx[,ms.range])%*%costmx*pn)
for (i in n.miss.point) {             # loop over different # of missing waves (designs)
mpoint <- combn(ms.range, i)           # possible combinations of missing points when n.miss.point=i
pattern <- matrix(0, nrow = ncol(mpoint), ncol = k * Time)  #pattern matrix
for (j in seq_len(nrow(pattern))) {
for (m in seq_len(nrow(mpoint)))
pattern[j, mpoint[m, j]]=1   #put missing in pattern matrix
}
completers <- rep(0, ncol(pattern))       # completers pattern
dropper <- c(rep(0, Time.complete * k),rep(1, (Time - Time.complete) * k))   #droppers pattern
# when user needs to have complete data on certain variables
if (is.null(complete.var)==F) {
if (length(complete.var)==1) {
# find which column these variables are
complete.cols <- which(VNAMES %in% complete.var)
# whether to keep the rows
keep <- pattern[, complete.cols]==0
pattern <- pattern[keep, , drop=FALSE]
}
if (length(complete.var) > 1) {
complete.cols <- which(VNAMES %in% complete.var)
keep <- rowSums(pattern[ , complete.cols]==0)==length(complete.var)
temp.pattern <- pattern[keep, , drop=FALSE]
if (is.null(dim(temp.pattern))==F) {
pattern <- temp.pattern
}
if (is.null(dim(temp.pattern))==T) {
pattern <- t(as.matrix(temp.pattern))
}
}
}
if(pd!=0) {      # if there are droppers
patmx <- rbind(pattern, completers, dropper)   # missing patterns for Mplus later
}
if(pd==0) {      # if there are no droppers
patmx <- rbind(pattern,completers)
}
designs[[rs]]=patmx
#### pattern probs
# p.probs
if (pd==0) {
p.probs <- c(rep(round((1 - pc - pd) / (nrow(patmx) - 1), 6), nrow(patmx) - 1), pc)
}
if (pd!=0) {
p.probs <- c(rep(round((1 - pc - pd) / (nrow(patmx) - 2), 6), nrow(patmx) - 2), pc, pd)
}
probs[[rs]] <- p.probs
# ns in each pattern
pn <- rep(0,length(p.probs))
for (pp in 1:(length(pn)-1)){
pn[pp] <- floor(n * p.probs[pp])
}
pn[length(pn)] <- n-sum(pn[1:(length(pn)-1)])
pat.n[[rs]] <- pn
### cost of each design
cost.design[rs] <- sum((1-patmx[,ms.range])%*%costmx*pn)
rs <- rs+1
}
if (eval.budget==T) {
if (sum(cost.design>rm.budget)==length(cost.design)) {
stop ("all wave missing designs cost more than the avaiable remaing budget. Try other designs.")
}
designs2 <- designs[cost.design<=rm.budget] #select the designs that are below the budget limit
probs2 <- probs[cost.design <= rm.budget]
miss.point <- n.miss.point[cost.design <= rm.budget]
cost.design2 <- cost.design[cost.design <= rm.budget]
pat.n2 <- pat.n[cost.design <= rm.budget]
}
if (eval.budget==F) {
designs2 <- designs
probs2 <- probs
miss.point <- n.miss.point
cost.design2 <- cost.design
pat.n2 <- pat.n
}
convergence.rate <- c()   #convergence rate
weakest.param.name <- c()
weakest.para.power <- c()
template <- list()
logical.Matrix <- list()
sim.out <- list()
seq_len(length(designs2))
d = 1
patmx <- designs2[[d]]
p.probs <- probs2[[d]]
pn <- pat.n2[[d]]
VNAMES <- NAMES
if (prod(pn>=1)==0) {
convergence.rate[d] <- NA   #convergence rate
weakest.param.name[d] <- NA
weakest.para.power[d] <- -99
template[d] <- NA
logical.Matrix[d] <- NA
sim.out[d] <- NA
}
if (prod(pn >= 1) != 0) {
###distal variables
if (is.null(distal.var)==F) {
dis.pat <- matrix(0,nrow=nrow(patmx),ncol=length(distal.var))
patmx <- cbind(patmx,dis.pat)
VNAMES <- c(VNAMES,distal.var)
}
#  FNAME=paste0("missing-waves-",miss.waves[d])  #file name
logical.mx <- matrix(0,nrow=n, ncol=ncol(patmx))
#  data <- data[sample(1:nrow(data)),]   #shuffle the rows
logical.mx[1:pn[1], ] <- patmx[rep(1,pn[1]), ]
if (length(pn) >= 3) {
for (pi in 2:(length(pn)-1)) {
logical.mx[(sum(pn[1:(pi-1)])+1):sum(pn[1:pi]), ] <- patmx[rep(pi, pn[pi]), ]
}
}
}
NAMES <- VarNAMES
patmx <- designs2[[d]]
p.probs <- probs2[[d]]
pn <- pat.n2[[d]]
VNAMES <- NAMES
if (prod(pn>=1)==0) {
convergence.rate[d] <- NA   #convergence rate
weakest.param.name[d] <- NA
weakest.para.power[d] <- -99
template[d] <- NA
logical.Matrix[d] <- NA
sim.out[d] <- NA
}
prod(pn >= 1) != 0
if (prod(pn >= 1) != 0) {
###distal variables
if (is.null(distal.var)==F) {
dis.pat <- matrix(0,nrow=nrow(patmx),ncol=length(distal.var))
patmx <- cbind(patmx,dis.pat)
VNAMES <- c(VNAMES,distal.var)
}
#  FNAME=paste0("missing-waves-",miss.waves[d])  #file name
logical.mx <- matrix(0,nrow=n, ncol=ncol(patmx))
#  data <- data[sample(1:nrow(data)),]   #shuffle the rows
logical.mx[1:pn[1], ] <- patmx[rep(1,pn[1]), ]
if (length(pn) >= 3) {
for (pi in 2:(length(pn)-1)) {
logical.mx[(sum(pn[1:(pi-1)])+1):sum(pn[1:pi]), ] <- patmx[rep(pi, pn[pi]), ]
}
}
# rest are completers
logical.Mx <- logical.mx==1
logical.Matrix[[d]] <- logical.Mx
#  miss.model=miss(logical=logical.Mx)
#  data.miss=impose(miss.model,data)
misstemplate <- miss(logical = logical.Mx, m=0)
output <- simsem::sim(nreps,
n = n,
model = analyzeModel,
generate=popModel,
miss=misstemplate,
seed = seed + d
#,multicore=multicore
)
template[[d]] <- misstemplate
sim.out[[d]] <- output
sim.param <- summaryParam(output)   #turn off
name.param <- rownames(summaryParam(output))   #turn off
converged <- output@converged == 0
if (sum(converged)==0) {
convergence.rate[d] <- 0
weakest.param.name[d] <- "NA"
weakest.para.power[d] <- 0
}
if (sum(converged)>0) {
f.param <- sim.param[name.param%in%focal.param,]
weakest.f.param <- f.param[f.param$`Power (Not equal 0)`==min(f.param$`Power (Not equal 0)`),]
if (nrow(weakest.f.param)>1) {
weakest.f.param <- weakest.f.param[1,]      ########## may need to be changed later
}
convergence.rate[d] <- sum(converged)/nreps    #converged number of simulations
weakest.param.name[d] <- rownames(weakest.f.param)
weakest.para.power[d] <- weakest.f.param$`Power (Not equal 0)`
}
}
}
library(simsem)
if (is.null(distal.var)==F) {
dis.pat <- matrix(0,nrow=nrow(patmx),ncol=length(distal.var))
patmx <- cbind(patmx,dis.pat)
VNAMES <- c(VNAMES,distal.var)
}
logical.mx <- matrix(0,nrow=n, ncol=ncol(patmx))
#  data <- data[sample(1:nrow(data)),]   #shuffle the rows
logical.mx[1:pn[1], ] <- patmx[rep(1,pn[1]), ]
if (length(pn) >= 3) {
for (pi in 2:(length(pn)-1)) {
logical.mx[(sum(pn[1:(pi-1)])+1):sum(pn[1:pi]), ] <- patmx[rep(pi, pn[pi]), ]
}
}
logical.mx
head(logical.Mx)
design2[[d]]
designs2[[d]]
# need to make sure the order of the variable is consistent
colnames(logical.Mx) <- colnames(logical.mx) <- VNAMES
logical.Matrix[[d]] <- logical.Mx
get_data <- simsem::sim(nRep = 1,
model = analyzeModel,
generate = popModel,
n = 1,
dataOnly = T)
analyzeModel
popModel
get_data <- simsem::sim(nRep = 1,
model = analyzeModel,
generate = popModel,
n = 10,
dataOnly = T)
get_data <- simsem::sim(nRep = 1,
model = analyzeModel,
generate = popModel,
n = 1,
dataOnly = T)
get_data <- simsem::sim(nRep = 1,
model = analyzeModel,
generate = popModel,
n = 2,
dataOnly = T)
colnames(get_data)
View(get_data)
colnames(get_data[[1]])
logical.Mx.reorder <- logical.Mx[, colnames(get_data[[1]])]
logical.Mx.reorder
head(logical.Mx.reorder)
head(logical.Mx)
misstemplate <- miss(logical = logical.Mx.reorder, m=0)
output <- simsem::sim(nreps,
n = n,
model = analyzeModel,
generate=popModel,
miss=misstemplate,
seed = seed + d
#,multicore=multicore
)
num.miss <- 1   #this function only deals with one missing slot
VNAMES <- NAMES
# calculated info based on user supplied info
future.k <- (Time - Time.complete) * k   # data points not yet completed, also maximum possible # of missing
ms.range <- c((Time.complete * k + 1):(Time * k))  # The available time slots to plant missingness
ms.combn <- combn(ms.range, num.miss) #all possible combinations of missing slots given num.miss
all.pattern <- matrix(0, nrow = choose(future.k, num.miss), ncol = length(VNAMES)) # place holder, all possible patterns with a certain ms
for (q in seq_len(nrow(all.pattern))) {
all.pattern[q, ms.combn[, q]] = 1
}
completers <- rep(0, ncol(all.pattern))       # completers pattern
dropper <- c(rep(0, Time.complete * k), rep(1, future.k))   #droppers pattern
#### if user specify certain variables to be complete
if (length(complete.var)==1) {
# find which column these variables are
complete.cols <- which(VNAMES %in% complete.var)
# whether to keep the rows
keep <- all.pattern[, complete.cols]==0
all.pattern <- all.pattern[keep, , drop=FALSE]
# take out these designs columns out of the ms.combn
ms.combn <- ms.combn[, keep, drop=FALSE]
}
if (length(complete.var)>1) {
complete.cols <- which(VNAMES %in% complete.var)
keep <- rowSums(all.pattern[, complete.cols]==0)==length(complete.var)
temp.pattern <- all.pattern[keep, , drop = FALSE]
if (is.null(dim(temp.pattern))==F) {
all.pattern <- temp.pattern
}
if (is.null(dim(temp.pattern))==T) {
all.pattern <- t(as.matrix(temp.pattern))
}
temp.combs <- ms.combn[ , keep, drop = FALSE]
if (is.null(dim(temp.combs))==F) {
ms.combn <- temp.combs
}
if (is.null(dim(temp.combs))==T) {
ms.combn <- as.matrix(temp.combs)
}
}
convergence.rate <- rep(NA, nrow(all.pattern))   #convergence rate
weakest.param.name <- rep(NA, nrow(all.pattern))
weakest.para.power <- rep(NA, nrow(all.pattern))
cost.design <- rep(NA, nrow(all.pattern)) # cost of each design
miss.num <- rep(num.miss, nrow(all.pattern))
miss.name <- matrix(NA, nrow(all.pattern), num.miss)
sim.seq <- rep(NA, nrow(all.pattern))
miss.loc <- matrix(NA, nrow(all.pattern), num.miss)
sim.out <- vector("list", nrow(all.pattern))   # simulation output storage
seq_len(nrow(all.pattern))
i = 1
if(pd!=0) {
patmx <- rbind(all.pattern[i, ], completers, dropper)   # missing patterns
}
if(pd==0) {
patmx <- rbind(all.pattern[i, ], completers)
}
if (is.null(distal.var)==F) {
dis.pat <- matrix(0, nrow = nrow(patmx), ncol = length(distal.var))
patmx <- cbind(patmx, dis.pat)
VNAMES <- c(VNAMES, distal.var)
}
if (pd==0) {
p.probs <- c(rep(round((1-pc-pd)/(nrow(patmx)-1),6), nrow(patmx)-1), pc)
}
if (pd!=0) {
p.probs <- c(rep(round((1-pc-pd)/(nrow(patmx)-2),6), nrow(patmx)-2), pc, pd)
}
pn <- rep(0, length(p.probs))
for (pp in 1:(length(pn)-1)) {
pn[pp] <- floor(n*p.probs[pp])
}
pn[length(pn)] <- n-sum(pn[1:(length(pn)-1)])
logical.mx <- matrix(0, nrow = n, ncol = ncol(patmx))
logical.mx[1:pn[1],] <- patmx[rep(1,pn[1]), ]
if (length(pn)>=3) {
for (pi in 2:(length(pn)-1)) {
logical.mx[(sum(pn[1:(pi-1)])+1):sum(pn[1:pi]),] <- patmx[rep(pi,pn[pi]), ]
}
}
logical.Mx <- logical.mx==1
# need to make sure the order of the variable is consistent
colnames(logical.Mx) <- colnames(logical.mx) <- VNAMES
logical.Matrix[[d]] <- logical.Mx
get_data <- simsem::sim(nRep = 1,
model = analyzeModel,
generate = popModel,
n = 2,
dataOnly = T)
logical.Mx.reorder <- logical.Mx[, colnames(get_data[[1]])]
misstemplate <- miss(logical = logical.Mx.reorder, m = 0)
output <- simsem::sim(nreps,
n = n,
model = analyzeModel,
generate = popModel,
miss = misstemplate,
seed = seed + i
#, multicore=multicore
)
library(simPM)
library(simPM)
library(pkgdown)
simPM::opt1.simsem
?plotPM
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
combn(8,5)
choose(8,5)
56000*1.5/60
56000*1.5/60/60
choose(8,2)
choose(8,3)
choose(8,4)
8+28+56+70+56
build_site()
build_site()
build_articles()
build_site()
build_site()
build_articles()
build_articles()
build_site()
build_articles()
build_articles()
build_site()
build_articles()
build_site()
build_site()
90*1135*0.7
45*1000*0.7
build_articles()
build_site()
?plotPM
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
plotPM(wave.ex3, fontsize_col = 15, angle_col = 90)
build_article()
build_articles()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_article()
build_articles()
build_site()
build_site()
build_site()
build_site()
